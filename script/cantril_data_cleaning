#!/bin/bash

usage_string="Usage: cantril_data_cleaning file1 file2 file3"

# Check the number of input arguments
if [ $# -ne 3 ]; then
    echo "Error: Incorrect number of arguments."
    echo $usage_string
    exit 1
fi

if ! [ -f "$1" ] || ! [ -f "$2" ] || ! [ -f "$3" ]; then
    echo "Existing files do not exist, please check."
    exit 1
fi

# Read file content
file1_contents=$(cat "$1")
file2_contents=$(cat "$2")
file3_contents=$(cat "$3")

echo "Success to read file"
echo "Start checking if the first row is tab-delimited"

# Ensure that the file is in a tab separated format based on the title (i.e. top) lineâ€œ
# This function takes the file content as input and returns 1 if the first line is tab-separated, otherwise returns 0.
is_tab_delimited() {
    local file_content=$1
    local title_line=$(echo "$file_content" | head -n 1)
    local tab_count=$(echo "$title_line" | grep -o $'\t' | wc -l)
    # echo "Tab count: $tab_count"
    if [[ $tab_count -gt 0 ]]; then
        return 0
    else
        return 1
    fi
}

if is_tab_delimited "$file1_contents"; then
    echo "The first file is tab-delimited."
else
    echo "The first file is not tab-delimited."
    exit 1
fi

if is_tab_delimited "$file2_contents"; then
    echo "The second file is tab-delimited."
else
    echo "The second file is not tab-delimited."
    exit 1
fi

if is_tab_delimited "$file3_contents"; then
    echo "The third file is tab-delimited."
else
    echo "The third file is not tab-delimited."
    exit 1
fi

echo "All files are tab-delimited"
echo "Start to recognize file"

is_gdp_file() {
    local file_content=$1
    local title_line=$(echo "$file_content" | head -n 1)
    IFS=$'\t' read -ra array <<< "$title_line"
    if [ ${#array[@]} -eq 7 ] && \
       [ "${array[0]}" == "Entity" ] && \
       [ "${array[1]}" == "Code" ] && \
       [ "${array[2]}" == "Year" ] && \
       [ "${array[3]}" == "Cantril ladder score" ] && \
       [ "${array[4]}" == "\"GDP per capita, PPP (constant 2017 international $)\"" ] && \
       [ "${array[5]}" == "Population (historical estimates)" ] && \
       [ "${array[6]}" == "Continent" ]; then
        return 0
    else
        return 1
    fi
}

get_gdp_file() {
    if is_gdp_file "$file1_contents"; then
        echo "$file1_contents"
    elif is_gdp_file "$file2_contents"; then
        echo "$file2_contents"
    elif is_gdp_file "$file3_contents"; then
        echo "$file3_contents"
    else
        return 1
    fi
}

gdp_file_content=$(get_gdp_file)
if [[ $? -ne 0 ]]; then
    echo "Error: Failed to get gdp file."
    exit 1
fi
# echo "$gdp_file_content" | head -n 1

is_homicide_file() {
    local file_content=$1
    local title_line=$(echo "$file_content" | head -n 1)
    IFS=$'\t' read -ra array <<< "$title_line"
    if [ ${#array[@]} -eq 4 ] && \
       [ "${array[0]}" == "Entity" ] && \
       [ "${array[1]}" == "Code" ] && \
       [ "${array[2]}" == "Year" ] && \
       [ "${array[3]}" == "\"Homicide rate per 100,000 population - Both sexes - All ages\"" ]; then
        return 0
    else
        return 1
    fi
}

get_homicide_file() {
    if is_homicide_file "$file1_contents"; then
        echo "$file1_contents"
    elif is_homicide_file "$file2_contents"; then
        echo "$file2_contents"
    elif is_homicide_file "$file3_contents"; then
        echo "$file3_contents"
    else
        return 1
    fi
}

homicide_file_content=$(get_homicide_file)
if [[ $? -ne 0 ]]; then
    echo "Error: Failed to get homicide file."
    exit 1
fi
#echo "$homicide_file_content" | head -n 1

is_life_file() {
    local file_content=$1
    local title_line=$(echo "$file_content" | head -n 1)
    IFS=$'\t' read -ra array <<< "$title_line"
    if [ ${#array[@]} -eq 7 ] && \
       [ "${array[0]}" == "Entity" ] && \
       [ "${array[1]}" == "Code" ] && \
       [ "${array[2]}" == "Year" ] && \
       [ "${array[3]}" == "Life expectancy - Sex: all - Age: at birth - Variant: estimates" ] && \
       [ "${array[4]}" == "Cantril ladder score" ] && \
       [ "${array[5]}" == "Population (historical estimates)" ] && \
       [ "${array[6]}" == "Continent" ]; then
        return 0
    else
        return 1
    fi
}

get_life_file() {
    if is_life_file "$file1_contents"; then
        echo "$file1_contents"
    elif is_life_file "$file2_contents"; then
        echo "$file2_contents"
    elif is_life_file "$file3_contents"; then
        echo "$file3_contents"
    else
        return 1
    fi
}

life_file_content=$(get_life_file)
if [[ $? -ne 0 ]]; then
    echo "Error: Failed to get life file."
    exit 1
fi
#echo "$life_file_content" | head -n 1

# Determine the uniqueness of the content of three files
if [[ "$gdp_file_content" == "$homicide_file_content" || "$gdp_file_content" == "$life_file_content" || "$homicide_file_content" == "$life_file_content" ]]; then
    echo "Error: The file contents are not unique."
    exit 1
fi

echo "Success to recognize file"

check_cell_count() {
    local file_content="$1"
    local title_line=$(echo "$file_content" | head -n 1)
    IFS=$'\t' read -ra title_array <<< "$title_line"
    # echo "title size: ${#title_array[@]}"
    printf "%s\n" "${file_content}" | while IFS= read -r line
    do  
        # echo "File:${line}"
        IFS=$'\t' read -ra array <<< "$line"
        echo "line size: ${#array[@]}"
        if [ ${#array[@]} -ne ${#title_array[@]} ]; then
            echo "The number of cells in line [$line] is different from the title line."
        fi
    done
}

check_cell_count "$gdp_file_content"
check_cell_count "$homicide_file_content"
check_cell_count "$life_file_content"

delete_column() {
    local file_content="$1"
    local num="$2"
    output_text=$(echo -e "$file_content" | cut -f${num} --complement)
}

# result=$(echo $gdp_file_content | awk -F'\t' '{$7=""; print}')
# echo "$result"