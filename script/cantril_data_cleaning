#!/bin/bash

usage_string="Usage: cantril_data_cleaning file1 file2 file3"

# Check the number of input arguments
if [ $# -ne 3 ]; then
    echo "Error: Incorrect number of arguments."
    echo ${usage_string}
    exit 1
fi

if ! [ -f "$1" ] || ! [ -f "$2" ] || ! [ -f "$3" ]; then
    echo "Existing files do not exist, please check."
    exit 1
fi

first_file=$1
second_file=$2
third_file=$3

# echo "first_file=$first_file"
# echo "second_file=$second_file"
# echo "third_file=$third_file"

echo "Success to read file"
echo "Start checking if the first row is tab-delimited"

# Ensure that the file is in a tab separated format based on the title (i.e. top) lineâ€œ
# This function takes the file content as input and returns 1 if the first line is tab-separated, otherwise returns 0.
is_tab_delimited() {
    local file_path=$1
    local title_line=$(cat "${file_path}" | head -n 1)
    local tab_count=$(echo "${title_line}" | grep -o $'\t' | wc -l)
    # echo "Tab count: $tab_count"
    if [[ $tab_count -gt 0 ]]; then
        return 0
    else
        return 1
    fi
}

if is_tab_delimited "${first_file}"; then
    echo "The first file is tab-delimited."
else
    echo "The first file is not tab-delimited."
    exit 1
fi

if is_tab_delimited "${second_file}"; then
    echo "The second file is tab-delimited."
else
    echo "The second file is not tab-delimited."
    exit 1
fi

if is_tab_delimited "${third_file}"; then
    echo "The third file is tab-delimited."
else
    echo "The third file is not tab-delimited."
    exit 1
fi

echo "All files are tab-delimited"
echo "Start to recognize file"

is_gdp_file() {
    local file_path=$1
    local title_line=$(cat "${file_path}" | head -n 1)
    IFS=$'\t' read -ra array <<< "${title_line}"
    if [ ${#array[@]} -eq 7 ] && \
       [ "${array[0]}" == "Entity" ] && \
       [ "${array[1]}" == "Code" ] && \
       [ "${array[2]}" == "Year" ] && \
       [ "${array[3]}" == "Cantril ladder score" ] && \
       [ "${array[4]}" == "\"GDP per capita, PPP (constant 2017 international $)\"" ] && \
       [ "${array[5]}" == "Population (historical estimates)" ] && \
       [ "${array[6]}" == "Continent" ]; then
        return 0
    else
        return 1
    fi
}

get_gdp_file() {
    if is_gdp_file "${first_file}"; then
        echo "${first_file}"
    elif is_gdp_file "${second_file}"; then
        echo "${second_file}"
    elif is_gdp_file "${third_file}"; then
        echo "${third_file}"
    else
        return 1
    fi
}

gdp_file_path=$(get_gdp_file)
if [[ $? -ne 0 ]]; then
    echo "Error: Failed to get gdp file."
    exit 1
fi
echo "gdp_file_path = ${gdp_file_path}"

is_homicide_file() {
    local file_path=$1
    local title_line=$(cat "$file_path" | head -n 1)
    IFS=$'\t' read -ra array <<< "$title_line"
    if [ ${#array[@]} -eq 4 ] && \
       [ "${array[0]}" == "Entity" ] && \
       [ "${array[1]}" == "Code" ] && \
       [ "${array[2]}" == "Year" ] && \
       [ "${array[3]}" == "\"Homicide rate per 100,000 population - Both sexes - All ages\"" ]; then
        return 0
    else
        return 1
    fi
}

get_homicide_file() {
    if is_homicide_file "${first_file}"; then
        echo "${first_file}"
    elif is_homicide_file "${second_file}"; then
        echo "$second_file"
    elif is_homicide_file "${third_file}"; then
        echo "${third_file}"
    else
        return 1
    fi
}

homicide_file_path=$(get_homicide_file)
if [[ $? -ne 0 ]]; then
    echo "Error: Failed to get homicide file."
    exit 1
fi
echo "homicide_file_path = ${homicide_file_path}"

is_life_file() {
    local file_path=$1
    local title_line=$(cat "${file_path}" | head -n 1)
    IFS=$'\t' read -ra array <<< "${title_line}"
    if [ ${#array[@]} -eq 7 ] && \
       [ "${array[0]}" == "Entity" ] && \
       [ "${array[1]}" == "Code" ] && \
       [ "${array[2]}" == "Year" ] && \
       [ "${array[3]}" == "Life expectancy - Sex: all - Age: at birth - Variant: estimates" ] && \
       [ "${array[4]}" == "Cantril ladder score" ] && \
       [ "${array[5]}" == "Population (historical estimates)" ] && \
       [ "${array[6]}" == "Continent" ]; then
        return 0
    else
        return 1
    fi
}

get_life_file() {
    if is_life_file "${first_file}"; then
        echo "${first_file}"
    elif is_life_file "${second_file}"; then
        echo "${second_file}"
    elif is_life_file "{$third_file}"; then
        echo "${third_file}"
    else
        return 1
    fi
}

life_file_path=$(get_life_file)
if [[ $? -ne 0 ]]; then
    echo "Error: Failed to get life file."
    exit 1
fi
echo "life_file_path = ${life_file_path}"

# Determine the uniqueness of the content of three files
if [[ "${gdp_file_path}" == "${homicide_file_path}" || "${gdp_file_path}" == "${life_file_path}" || "${homicide_file_path}" == "${life_file_path}" ]]; then
    echo "Error: The file contents are not unique."
    exit 1
fi

echo "Success to recognize file"
echo "Start to cell count check"

awk -F'\t' 'NR==FNR{title_tab_count=NF; next} NR>FNR{line_tab_count=NF; if (title_tab_count != line_tab_count) print "The number of cells in " FNR " th-line [" $0 "] is different from the title line."}' "${gdp_file_path}" "${gdp_file_path}"
awk -F'\t' 'NR==FNR{title_tab_count=NF; next} NR>FNR{line_tab_count=NF; if (title_tab_count != line_tab_count) print "The number of cells in " FNR " th-line [" $0 "] is different from the title line."}' "${homicide_file_path}" "${homicide_file_path}"
awk -F'\t' 'NR==FNR{title_tab_count=NF; next} NR>FNR{line_tab_count=NF; if (title_tab_count != line_tab_count) print "The number of cells in " FNR " th-line [" $0 "] is different from the title line."}' "${life_file_path}" "${life_file_path}"

echo "Complete cell count check"

# create temporary directory
tmp_path='./tmp/'
if [ -d "$tmp_path" ]; then
    rm -r "$tmp_path"
fi
mkdir $tmp_path

echo "Start deleting the column titled 'Continent'"
gdp_tmp_path=${tmp_path}"gdp_file.tsv"
homicide_tmp_path=${tmp_path}"homicide_file.tsv"
life_tmp_path=${tmp_path}"life_file.tsv"
cut -d $'\t' -f1-6 ${gdp_file_path} > ${gdp_tmp_path}
cut -d $'\t' -f1-4 ${homicide_file_path} > ${homicide_tmp_path}
cut -d $'\t' -f1-6 ${life_file_path} > ${life_tmp_path}

echo "Complete deleting the column titled 'Continent'"
echo "Start filtering rows with empty country code field"

filtered_gdp_tmp_path=${tmp_path}"filtered_gdp_file.tsv"
filtered_homicide_tmp_path=${tmp_path}"filtered_homicide_file.tsv"
filtered_life_tmp_path=${tmp_path}"filtered_life_file.tsv"
awk -F'\t' 'NR==1 || $2 != "" { print }' "${gdp_tmp_path}" > ${filtered_gdp_tmp_path}
awk -F'\t' 'NR==1 || $2 != "" { print }' "${homicide_tmp_path}" > ${filtered_homicide_tmp_path}
awk -F'\t' 'NR==1 || $2 != "" { print }' "${life_tmp_path}" > ${filtered_life_tmp_path}

rm ${gdp_tmp_path}
rm ${homicide_tmp_path}
rm ${life_tmp_path}

mv ${filtered_gdp_tmp_path} ${gdp_tmp_path}
mv ${filtered_homicide_tmp_path} ${homicide_tmp_path}
mv ${filtered_life_tmp_path} ${life_tmp_path}

echo "Complete filtering rows with empty country code field"
echo "Start filtering data between 2011-2021"

awk -F'\t' 'NR==1 || ($3 >= 2011 && $3 <= 2021) { print }' "$gdp_tmp_path" > ${filtered_gdp_tmp_path}
awk -F'\t' 'NR==1 || ($3 >= 2011 && $3 <= 2021) { print }' "$homicide_tmp_path" > ${filtered_homicide_tmp_path}
awk -F'\t' 'NR==1 || ($3 >= 2011 && $3 <= 2021) { print }' "$life_tmp_path" > ${filtered_life_tmp_path}

rm ${gdp_tmp_path}
rm ${homicide_tmp_path}
rm ${life_tmp_path}

mv ${filtered_gdp_tmp_path} ${gdp_tmp_path}
mv ${filtered_homicide_tmp_path} ${homicide_tmp_path}
mv ${filtered_life_tmp_path} ${life_tmp_path}

echo "Complete filtering data between 2011-2021"
echo "Start to combine file"

(head -n 1 ${gdp_tmp_path} && tail -n +2 ${gdp_tmp_path} | sort -t $'\t' -k1,1 -k2,2 -k3,3) > ${filtered_gdp_tmp_path}
(head -n 1 ${homicide_tmp_path} && tail -n +2 ${homicide_tmp_path} | sort -t $'\t' -k1,1 -k2,2 -k3,3) > ${filtered_homicide_tmp_path}
(head -n 1 ${life_tmp_path} && tail -n +2 ${life_tmp_path} | sort -t $'\t' -k1,1 -k2,2 -k3,3) > ${filtered_life_tmp_path}

rm ${gdp_tmp_path}
rm ${homicide_tmp_path}
rm ${life_tmp_path}

mv ${filtered_gdp_tmp_path} ${gdp_tmp_path}
mv ${filtered_homicide_tmp_path} ${homicide_tmp_path}
mv ${filtered_life_tmp_path} ${life_tmp_path}

gdp_homicide_merged_file=${tmp_path}"gdp_homicide_merged_file.tsv"
result_file=${tmp_path}"result_file.tsv"
filtered_result_file=${tmp_path}"filtered_result_file.tsv"

awk -F"\t" 'BEGIN {OFS="\t"} NR==FNR {a[$1$2$3]=$4; next} ($1$2$3 in a) {print $0, a[$1$2$3]}' ${homicide_tmp_path} ${gdp_tmp_path} > ${gdp_homicide_merged_file}
awk -F"\t" 'BEGIN {OFS="\t"} NR==FNR {a[$1$2$3]=$4FS$5FS$6FS$7; next} ($1$2$3 in a) {print $0, a[$1$2$3]}' ${gdp_homicide_merged_file} ${life_tmp_path} > ${result_file}
awk -F"\t" 'BEGIN {OFS="\t"} $4 != "" && $5 != "" && $6 != "" && $8 != ""  && $10 != "" {print $0}' ${result_file} > ${filtered_result_file}

mv ${filtered_result_file} ${result_file}
awk -F"\t" 'BEGIN {OFS="\t"} {$5=""; $6=""; sub(/\t\t/, "\t"); print $0}' ${result_file} > ${filtered_result_file}
mv ${filtered_result_file} ${result_file}
awk -F"\t" 'BEGIN {OFS="\t"} {print $1, $2, $3, $7, $8, $9, $4, $6}' ${result_file} > ${filtered_result_file}
mv ${filtered_result_file} ${result_file}

echo "Complete to combine file"
cat "${result_file}"